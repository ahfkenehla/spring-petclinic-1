pipeline {
  agent any
    tools {
        maven 'M3'
        jdk 'JDK11'
    }
    parameters {
        booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
        booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
        booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
        booleanParam(name : 'PROMPT_FOR_DEPLOY', defaultValue : false, description : 'PROMPT_FOR_DEPLOY')
        booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

        // CI
        string(name : 'AWS_ACCOUNT_ID', defaultValue : '257307634175', description : 'AWS_ACCOUNT_ID')
        string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'spring-petclinic', description : 'DOCKER_IMAGE_NAME')
        string(name : 'DOCKER_TAG', defaultValue : '1.0', description : 'DOCKER_TAG')

        // CD
        string(name : 'TARGET_SVR_USER', defaultValue : 'ubuntu', description : 'TARGET_SVR_USER')
        string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ubuntu/', description : 'TARGET_SVR_PATH')
        string(name : 'TARGET_SVR', defaultValue : '10.0.3.61', description : 'TARGET_SVR')
    }

    environment {
      AWS_CREDENTIAL_NAME = "AWSCredentials"
      REGION = "ap-northeast-2"
      ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
      ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}"
      ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
    
      CODEBUILD_NAME = "jenkins-slave-codebuild"
      CODEBUILD_ARTIFACT_S3_NAME = "jenkins-slave-artifact-codebuild-s3"
      CODEBUILD_ARTIFACT_S3_KEY = "${currentBuild.number}/jenkins-slave-codebuild"
      CODEDEPLOY_NAME = "project00-codedeploy-app"
      CODEDEPLOY_GROUP_NAME = "project00-codedeploy-group"
    }

  stages {
    stage('============ Build Docker Image ============') {
      steps {
        awsCodeBuild(
          credentialsType: 'keys',
          region: "${REGION}",
          projectName: "${CODEBUILD_NAME}",
          sourceControlType: 'jenkins',
          sseAlgorithm: 'AES256',
          buildSpecFile: "deploy/buildspec.yml",
          artifactTypeOverride: "S3",
          artifactNamespaceOverride: "NONE",
          artifactPackagingOverride: "ZIP",
          artifactPathOverride: "${currentBuild.number}",
          artifactLocationOverride: "${CODEBUILD_ARTIFACT_S3_NAME}"
        )
      }
    }
    stage('Prompt for deploy') {
      steps {
        script {
          env.APPROAL_NUM = input message: 'Please enter the approval number',
            parameters: [string(defaultValue: '', description: '', name: 'APPROVAL_NUM')]
        }
        echo "${env.APPROAL_NUM}"
      }
    }
    stage('============ Deploy workload ============') {
      steps {
        echo "Run CodeDeploy with creating deployment"
        script {
          sh'''
            aws deploy create-deployment \
            --application-name ${CODEDEPLOY_NAME} \
            --deployment-group-name ${CODEDEPLOY_GROUP_NAME} \
            --region ${REGION} \
            --s3-location bucket=${CODEBUILD_ARTIFACT_S3_NAME},bundleType=zip,key=${CODEBUILD_ARTIFACT_S3_KEY} \
            --file-exists-behavior OVERWRITE \
            --output json > DEPLOYMENT_ID.json
            '''
            def DEPLOYMENT_ID = sh(script: "cat DEPLOYMENT_ID.json | grep -o '\"deploymentId\": \"[^\"]*' | cut -d'\"' -f4", returnStdout: true).trim()
            echo "$DEPLOYMENT_ID"
            sh "rm -rf ./DEPLOYMENT_ID.json"
            def DEPLOYMENT_RESULT = ""
            while("$DEPLOYMENT_RESULT" != "\"Succeeded\"") {
              DEPLOYMENT_RESULT = sh(
                script:"aws deploy get-deployment \
                --region ${REGION} \
                --query \"deploymentInfo.status\" \
                --deployment-id ${DEPLOYMENT_ID}",
                returnStdout: true
                ).trim()
              echo "$DEPLOYMENT_RESULT"
              if ("$DEPLOYMENT_RESULT" == "\"Failed\"") {
                currentBuild.result = 'FAILURE'
                break
              }
              sleep(10) // sleep 10s
            }
            currentBuild.result = 'SUCCESS'
          }
        }
      }
    }
  }

  post {
    success {
      slackSend(
        channel: "#jenkins",
        color: "good",
        message: "[Successful] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} (<${env.RUN_DISPLAY_URL}|open job detail>)"
      )
    }
    failure {
      slackSend(
        channel: "#jenkins",
        color: "danger",
        message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
      )
    }
  }
}
